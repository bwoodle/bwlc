# 389. Find the Difference
# Easy
# You are given two strings s and t.
# String t is generated by random shuffling string s and then add one more letter at a random position.
# Return the letter that was added to t.

# Example 1:
# Input: s = "abcd", t = "abcde"
# Output: "e"
# Explanation: 'e' is the letter that was added.

# Example 2:
# Input: s = "", t = "y"
# Output: "y"

# Constraints:
# 0 <= s.length <= 1000
# t.length == s.length + 1
# s and t consist of lowercase English letters.

# Solution thinking out loud:
# Loop through characters in t, remove characters from s when found
# The string manipulation will be expensive, and this is n^2 complexity...
# What's a slightly better approach for v1?
# - Loop through s and add/update character counts in a dictionary (O(n) for looping, O(1) for add/update)
# - Loop through t and lookup + subtract character count. When subtracted value == -1, we're done. O(n) for looping, O(1) for lookup, O(1) for update
# Unless I've missed something that's O(n) time complexity, O(n) memory complexity...

# Solution beats 24.77% runtime, 70.80% memory

# More optimal solution uses bitwise XOR. Worth learning down the road./

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        foundIndices = {}
        for i in range(len(s)):
            foundIndices[s[i]] = foundIndices[s[i]] + 1 if s[i] in foundIndices else 1
        for j in range(len(t)):
            if t[j] not in foundIndices or foundIndices[t[j]] == 0:
                return t[j]
            foundIndices[t[j]] = foundIndices[t[j]] - 1
        return ""

if __name__ == "__main__":
    s = Solution()
    print(s.findTheDifference("abcd", "abcde"))  # Expected: "e"
    print(s.findTheDifference("", "y"))          # Expected: "y"
    print(s.findTheDifference("a", "aa"))        # Expected: "a"
    print(s.findTheDifference("ae", "aea"))      # Expected: "a"